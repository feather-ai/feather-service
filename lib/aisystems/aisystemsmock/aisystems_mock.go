// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/aisystems/aisystems.go

// Package aisystemsmock is a generated GoMock package.
package aisystemsmock

import (
	context "context"
	json "encoding/json"
	aisystems "feather-ai/service-core/lib/aisystems"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockAISystemsManager is a mock of AISystemsManager interface.
type MockAISystemsManager struct {
	ctrl     *gomock.Controller
	recorder *MockAISystemsManagerMockRecorder
}

// MockAISystemsManagerMockRecorder is the mock recorder for MockAISystemsManager.
type MockAISystemsManagerMockRecorder struct {
	mock *MockAISystemsManager
}

// NewMockAISystemsManager creates a new mock instance.
func NewMockAISystemsManager(ctrl *gomock.Controller) *MockAISystemsManager {
	mock := &MockAISystemsManager{ctrl: ctrl}
	mock.recorder = &MockAISystemsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAISystemsManager) EXPECT() *MockAISystemsManagerMockRecorder {
	return m.recorder
}

// CreateNewVersion mocks base method.
func (m *MockAISystemsManager) CreateNewVersion(ctx context.Context, systemId uuid.UUID, tag, schema string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewVersion", ctx, systemId, tag, schema)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewVersion indicates an expected call of CreateNewVersion.
func (mr *MockAISystemsManagerMockRecorder) CreateNewVersion(ctx, systemId, tag, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewVersion", reflect.TypeOf((*MockAISystemsManager)(nil).CreateNewVersion), ctx, systemId, tag, schema)
}

// DebugGetRunSystemSchema mocks base method.
func (m *MockAISystemsManager) DebugGetRunSystemSchema(ctx context.Context, systemId uuid.UUID, stepIndex int) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugGetRunSystemSchema", ctx, systemId, stepIndex)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugGetRunSystemSchema indicates an expected call of DebugGetRunSystemSchema.
func (mr *MockAISystemsManagerMockRecorder) DebugGetRunSystemSchema(ctx, systemId, stepIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugGetRunSystemSchema", reflect.TypeOf((*MockAISystemsManager)(nil).DebugGetRunSystemSchema), ctx, systemId, stepIndex)
}

// GetOrCreateNewSystem mocks base method.
func (m *MockAISystemsManager) GetOrCreateNewSystem(ctx context.Context, userId uuid.UUID, name, slug, description string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateNewSystem", ctx, userId, name, slug, description)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateNewSystem indicates an expected call of GetOrCreateNewSystem.
func (mr *MockAISystemsManagerMockRecorder) GetOrCreateNewSystem(ctx, userId, name, slug, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateNewSystem", reflect.TypeOf((*MockAISystemsManager)(nil).GetOrCreateNewSystem), ctx, userId, name, slug, description)
}

// GetSystemByID mocks base method.
func (m *MockAISystemsManager) GetSystemByID(ctx context.Context, systemId uuid.UUID) (*aisystems.SystemDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemByID", ctx, systemId)
	ret0, _ := ret[0].(*aisystems.SystemDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemByID indicates an expected call of GetSystemByID.
func (mr *MockAISystemsManagerMockRecorder) GetSystemByID(ctx, systemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemByID", reflect.TypeOf((*MockAISystemsManager)(nil).GetSystemByID), ctx, systemId)
}

// GetSystemByUserAndSlug mocks base method.
func (m *MockAISystemsManager) GetSystemByUserAndSlug(ctx context.Context, userId uuid.UUID, slug string) *aisystems.SystemDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemByUserAndSlug", ctx, userId, slug)
	ret0, _ := ret[0].(*aisystems.SystemDTO)
	return ret0
}

// GetSystemByUserAndSlug indicates an expected call of GetSystemByUserAndSlug.
func (mr *MockAISystemsManagerMockRecorder) GetSystemByUserAndSlug(ctx, userId, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemByUserAndSlug", reflect.TypeOf((*MockAISystemsManager)(nil).GetSystemByUserAndSlug), ctx, userId, slug)
}

// GetSystemDetails mocks base method.
func (m *MockAISystemsManager) GetSystemDetails(ctx context.Context, systemId uuid.UUID) (*aisystems.SystemDTO, *aisystems.SystemVersionDTO, []aisystems.FileDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemDetails", ctx, systemId)
	ret0, _ := ret[0].(*aisystems.SystemDTO)
	ret1, _ := ret[1].(*aisystems.SystemVersionDTO)
	ret2, _ := ret[2].([]aisystems.FileDTO)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetSystemDetails indicates an expected call of GetSystemDetails.
func (mr *MockAISystemsManagerMockRecorder) GetSystemDetails(ctx, systemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemDetails", reflect.TypeOf((*MockAISystemsManager)(nil).GetSystemDetails), ctx, systemId)
}

// GetSystems mocks base method.
func (m *MockAISystemsManager) GetSystems(ctx context.Context) ([]aisystems.SystemDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystems", ctx)
	ret0, _ := ret[0].([]aisystems.SystemDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystems indicates an expected call of GetSystems.
func (mr *MockAISystemsManagerMockRecorder) GetSystems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystems", reflect.TypeOf((*MockAISystemsManager)(nil).GetSystems), ctx)
}

// GetSystemsByUser mocks base method.
func (m *MockAISystemsManager) GetSystemsByUser(ctx context.Context, userId uuid.UUID) ([]aisystems.SystemDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemsByUser", ctx, userId)
	ret0, _ := ret[0].([]aisystems.SystemDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemsByUser indicates an expected call of GetSystemsByUser.
func (mr *MockAISystemsManagerMockRecorder) GetSystemsByUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemsByUser", reflect.TypeOf((*MockAISystemsManager)(nil).GetSystemsByUser), ctx, userId)
}

// RunSystem mocks base method.
func (m *MockAISystemsManager) RunSystem(ctx context.Context, systemId uuid.UUID, stepIndex int, inputDataJson string) ([]json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSystem", ctx, systemId, stepIndex, inputDataJson)
	ret0, _ := ret[0].([]json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunSystem indicates an expected call of RunSystem.
func (mr *MockAISystemsManagerMockRecorder) RunSystem(ctx, systemId, stepIndex, inputDataJson interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSystem", reflect.TypeOf((*MockAISystemsManager)(nil).RunSystem), ctx, systemId, stepIndex, inputDataJson)
}
