// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/storage/storage.go

// Package storagemock is a generated GoMock package.
package storagemock

import (
	context "context"
	storage "feather-ai/service-core/lib/storage"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageManager is a mock of StorageManager interface.
type MockStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockStorageManagerMockRecorder
}

// MockStorageManagerMockRecorder is the mock recorder for MockStorageManager.
type MockStorageManagerMockRecorder struct {
	mock *MockStorageManager
}

// NewMockStorageManager creates a new mock instance.
func NewMockStorageManager(ctrl *gomock.Controller) *MockStorageManager {
	mock := &MockStorageManager{ctrl: ctrl}
	mock.recorder = &MockStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageManager) EXPECT() *MockStorageManagerMockRecorder {
	return m.recorder
}

// GetBlobStorage mocks base method.
func (m *MockStorageManager) GetBlobStorage(bucketName string) storage.BlobStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobStorage", bucketName)
	ret0, _ := ret[0].(storage.BlobStorage)
	return ret0
}

// GetBlobStorage indicates an expected call of GetBlobStorage.
func (mr *MockStorageManagerMockRecorder) GetBlobStorage(bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobStorage", reflect.TypeOf((*MockStorageManager)(nil).GetBlobStorage), bucketName)
}

// GetDB mocks base method.
func (m *MockStorageManager) GetDB() storage.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(storage.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockStorageManagerMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockStorageManager)(nil).GetDB))
}

// MockBlobStorage is a mock of BlobStorage interface.
type MockBlobStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBlobStorageMockRecorder
}

// MockBlobStorageMockRecorder is the mock recorder for MockBlobStorage.
type MockBlobStorageMockRecorder struct {
	mock *MockBlobStorage
}

// NewMockBlobStorage creates a new mock instance.
func NewMockBlobStorage(ctrl *gomock.Controller) *MockBlobStorage {
	mock := &MockBlobStorage{ctrl: ctrl}
	mock.recorder = &MockBlobStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlobStorage) EXPECT() *MockBlobStorageMockRecorder {
	return m.recorder
}

// GenerateUploadURL mocks base method.
func (m *MockBlobStorage) GenerateUploadURL(ctx context.Context, name string, expiry time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUploadURL", ctx, name, expiry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUploadURL indicates an expected call of GenerateUploadURL.
func (mr *MockBlobStorageMockRecorder) GenerateUploadURL(ctx, name, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUploadURL", reflect.TypeOf((*MockBlobStorage)(nil).GenerateUploadURL), ctx, name, expiry)
}

// GetFilesInFolder mocks base method.
func (m *MockBlobStorage) GetFilesInFolder(ctx context.Context, folder string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesInFolder", ctx, folder)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesInFolder indicates an expected call of GetFilesInFolder.
func (mr *MockBlobStorageMockRecorder) GetFilesInFolder(ctx, folder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesInFolder", reflect.TypeOf((*MockBlobStorage)(nil).GetFilesInFolder), ctx, folder)
}

// GetRootPath mocks base method.
func (m *MockBlobStorage) GetRootPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRootPath indicates an expected call of GetRootPath.
func (mr *MockBlobStorageMockRecorder) GetRootPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootPath", reflect.TypeOf((*MockBlobStorage)(nil).GetRootPath))
}

// MockPreparedStatement is a mock of PreparedStatement interface.
type MockPreparedStatement struct {
	ctrl     *gomock.Controller
	recorder *MockPreparedStatementMockRecorder
}

// MockPreparedStatementMockRecorder is the mock recorder for MockPreparedStatement.
type MockPreparedStatementMockRecorder struct {
	mock *MockPreparedStatement
}

// NewMockPreparedStatement creates a new mock instance.
func NewMockPreparedStatement(ctrl *gomock.Controller) *MockPreparedStatement {
	mock := &MockPreparedStatement{ctrl: ctrl}
	mock.recorder = &MockPreparedStatementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreparedStatement) EXPECT() *MockPreparedStatementMockRecorder {
	return m.recorder
}

// QueryMany mocks base method.
func (m *MockPreparedStatement) QueryMany(ctx context.Context, args, results interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMany", ctx, args, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryMany indicates an expected call of QueryMany.
func (mr *MockPreparedStatementMockRecorder) QueryMany(ctx, args, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMany", reflect.TypeOf((*MockPreparedStatement)(nil).QueryMany), ctx, args, results)
}

// Write mocks base method.
func (m *MockPreparedStatement) Write(ctx context.Context, args interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockPreparedStatementMockRecorder) Write(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockPreparedStatement)(nil).Write), ctx, args)
}

// WriteReturnID mocks base method.
func (m *MockPreparedStatement) WriteReturnID(ctx context.Context, args interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteReturnID", ctx, args)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteReturnID indicates an expected call of WriteReturnID.
func (mr *MockPreparedStatementMockRecorder) WriteReturnID(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReturnID", reflect.TypeOf((*MockPreparedStatement)(nil).WriteReturnID), ctx, args)
}

// MockDBTransaction is a mock of DBTransaction interface.
type MockDBTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockDBTransactionMockRecorder
}

// MockDBTransactionMockRecorder is the mock recorder for MockDBTransaction.
type MockDBTransactionMockRecorder struct {
	mock *MockDBTransaction
}

// NewMockDBTransaction creates a new mock instance.
func NewMockDBTransaction(ctrl *gomock.Controller) *MockDBTransaction {
	mock := &MockDBTransaction{ctrl: ctrl}
	mock.recorder = &MockDBTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBTransaction) EXPECT() *MockDBTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockDBTransaction) Commit(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit", ctx)
}

// Commit indicates an expected call of Commit.
func (mr *MockDBTransactionMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDBTransaction)(nil).Commit), ctx)
}

// Error mocks base method.
func (m *MockDBTransaction) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockDBTransactionMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockDBTransaction)(nil).Error))
}

// Execute mocks base method.
func (m *MockDBTransaction) Execute(ctx context.Context, statement storage.PreparedStatement, args interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", ctx, statement, args)
}

// Execute indicates an expected call of Execute.
func (mr *MockDBTransactionMockRecorder) Execute(ctx, statement, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDBTransaction)(nil).Execute), ctx, statement, args)
}

// ExecuteMany mocks base method.
func (m *MockDBTransaction) ExecuteMany(ctx context.Context, statement storage.PreparedStatement, args []interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteMany", ctx, statement, args)
}

// ExecuteMany indicates an expected call of ExecuteMany.
func (mr *MockDBTransactionMockRecorder) ExecuteMany(ctx, statement, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteMany", reflect.TypeOf((*MockDBTransaction)(nil).ExecuteMany), ctx, statement, args)
}

// Rollback mocks base method.
func (m *MockDBTransaction) Rollback(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", ctx)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDBTransactionMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDBTransaction)(nil).Rollback), ctx)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// DynamicQuery mocks base method.
func (m *MockDB) DynamicQuery(ctx context.Context, query string, results interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DynamicQuery", ctx, query, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// DynamicQuery indicates an expected call of DynamicQuery.
func (mr *MockDBMockRecorder) DynamicQuery(ctx, query, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DynamicQuery", reflect.TypeOf((*MockDB)(nil).DynamicQuery), ctx, query, results)
}

// NewTransaction mocks base method.
func (m *MockDB) NewTransaction(ctx context.Context) (storage.DBTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", ctx)
	ret0, _ := ret[0].(storage.DBTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockDBMockRecorder) NewTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockDB)(nil).NewTransaction), ctx)
}

// PrepareQuery mocks base method.
func (m *MockDB) PrepareQuery(query string) storage.PreparedStatement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareQuery", query)
	ret0, _ := ret[0].(storage.PreparedStatement)
	return ret0
}

// PrepareQuery indicates an expected call of PrepareQuery.
func (mr *MockDBMockRecorder) PrepareQuery(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareQuery", reflect.TypeOf((*MockDB)(nil).PrepareQuery), query)
}
