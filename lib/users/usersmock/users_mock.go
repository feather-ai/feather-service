// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/users/users.go

// Package usersmock is a generated GoMock package.
package usersmock

import (
	context "context"
	users "feather-ai/service-core/lib/users"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockUserManager) CreateAPIKey(ctx context.Context, userId uuid.UUID, name string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, userId, name)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockUserManagerMockRecorder) CreateAPIKey(ctx, userId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockUserManager)(nil).CreateAPIKey), ctx, userId, name)
}

// DeleteAPIKey mocks base method.
func (m *MockUserManager) DeleteAPIKey(ctx context.Context, userId, key uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, userId, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockUserManagerMockRecorder) DeleteAPIKey(ctx, userId, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockUserManager)(nil).DeleteAPIKey), ctx, userId, key)
}

// ExtendFeatherToen mocks base method.
func (m *MockUserManager) ExtendFeatherToen(ctx context.Context, token users.EncryptedFeatherToken) (*users.EncryptedFeatherToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendFeatherToen", ctx, token)
	ret0, _ := ret[0].(*users.EncryptedFeatherToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendFeatherToen indicates an expected call of ExtendFeatherToen.
func (mr *MockUserManagerMockRecorder) ExtendFeatherToen(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendFeatherToen", reflect.TypeOf((*MockUserManager)(nil).ExtendFeatherToen), ctx, token)
}

// GetAllAPIKeys mocks base method.
func (m *MockUserManager) GetAllAPIKeys(ctx context.Context, userId uuid.UUID) ([]users.ApiKeyDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIKeys", ctx, userId)
	ret0, _ := ret[0].([]users.ApiKeyDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIKeys indicates an expected call of GetAllAPIKeys.
func (mr *MockUserManagerMockRecorder) GetAllAPIKeys(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIKeys", reflect.TypeOf((*MockUserManager)(nil).GetAllAPIKeys), ctx, userId)
}

// GetUserByID mocks base method.
func (m *MockUserManager) GetUserByID(ctx context.Context, userId uuid.UUID) (*users.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userId)
	ret0, _ := ret[0].(*users.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserManagerMockRecorder) GetUserByID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserManager)(nil).GetUserByID), ctx, userId)
}

// GetUserByName mocks base method.
func (m *MockUserManager) GetUserByName(ctx context.Context, name string) (*users.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*users.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserManagerMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserManager)(nil).GetUserByName), ctx, name)
}

// LoginAuthenticate mocks base method.
func (m *MockUserManager) LoginAuthenticate(ctx context.Context, netlifyToken string) (*users.EncryptedFeatherToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAuthenticate", ctx, netlifyToken)
	ret0, _ := ret[0].(*users.EncryptedFeatherToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAuthenticate indicates an expected call of LoginAuthenticate.
func (mr *MockUserManagerMockRecorder) LoginAuthenticate(ctx, netlifyToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAuthenticate", reflect.TypeOf((*MockUserManager)(nil).LoginAuthenticate), ctx, netlifyToken)
}

// LookUpUsersByIDs mocks base method.
func (m *MockUserManager) LookUpUsersByIDs(ctx context.Context, userIds []uuid.UUID) (map[string]*users.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookUpUsersByIDs", ctx, userIds)
	ret0, _ := ret[0].(map[string]*users.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpUsersByIDs indicates an expected call of LookUpUsersByIDs.
func (mr *MockUserManagerMockRecorder) LookUpUsersByIDs(ctx, userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpUsersByIDs", reflect.TypeOf((*MockUserManager)(nil).LookUpUsersByIDs), ctx, userIds)
}

// ValidateAPIKey mocks base method.
func (m *MockUserManager) ValidateAPIKey(ctx context.Context, key uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAPIKey", ctx, key)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAPIKey indicates an expected call of ValidateAPIKey.
func (mr *MockUserManagerMockRecorder) ValidateAPIKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAPIKey", reflect.TypeOf((*MockUserManager)(nil).ValidateAPIKey), ctx, key)
}

// ValidateFeatherToken mocks base method.
func (m *MockUserManager) ValidateFeatherToken(ctx context.Context, token users.EncryptedFeatherToken) (*users.FeatherTokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateFeatherToken", ctx, token)
	ret0, _ := ret[0].(*users.FeatherTokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateFeatherToken indicates an expected call of ValidateFeatherToken.
func (mr *MockUserManagerMockRecorder) ValidateFeatherToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateFeatherToken", reflect.TypeOf((*MockUserManager)(nil).ValidateFeatherToken), ctx, token)
}
