// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/upload/upload.go

// Package uploadmock is a generated GoMock package.
package uploadmock

import (
	context "context"
	upload "feather-ai/service-core/lib/upload"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockUploadManager is a mock of UploadManager interface.
type MockUploadManager struct {
	ctrl     *gomock.Controller
	recorder *MockUploadManagerMockRecorder
}

// MockUploadManagerMockRecorder is the mock recorder for MockUploadManager.
type MockUploadManagerMockRecorder struct {
	mock *MockUploadManager
}

// NewMockUploadManager creates a new mock instance.
func NewMockUploadManager(ctrl *gomock.Controller) *MockUploadManager {
	mock := &MockUploadManager{ctrl: ctrl}
	mock.recorder = &MockUploadManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadManager) EXPECT() *MockUploadManagerMockRecorder {
	return m.recorder
}

// CreateUploadRequest mocks base method.
func (m *MockUploadManager) CreateUploadRequest(ctx context.Context, systemId uuid.UUID, versionTag string, codeFiles, modelFiles []string, schema string) (*upload.UploadRequestDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadRequest", ctx, systemId, versionTag, codeFiles, modelFiles, schema)
	ret0, _ := ret[0].(*upload.UploadRequestDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadRequest indicates an expected call of CreateUploadRequest.
func (mr *MockUploadManagerMockRecorder) CreateUploadRequest(ctx, systemId, versionTag, codeFiles, modelFiles, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadRequest", reflect.TypeOf((*MockUploadManager)(nil).CreateUploadRequest), ctx, systemId, versionTag, codeFiles, modelFiles, schema)
}

// GetUploadRequestsForUser mocks base method.
func (m *MockUploadManager) GetUploadRequestsForUser(ctx context.Context, userId uuid.UUID) []upload.UploadRequestDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadRequestsForUser", ctx, userId)
	ret0, _ := ret[0].([]upload.UploadRequestDTO)
	return ret0
}

// GetUploadRequestsForUser indicates an expected call of GetUploadRequestsForUser.
func (mr *MockUploadManagerMockRecorder) GetUploadRequestsForUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadRequestsForUser", reflect.TypeOf((*MockUploadManager)(nil).GetUploadRequestsForUser), ctx, userId)
}

// TryCompleteUpload mocks base method.
func (m *MockUploadManager) TryCompleteUpload(ctx context.Context, reqId uuid.UUID) (*upload.UploadRequestDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryCompleteUpload", ctx, reqId)
	ret0, _ := ret[0].(*upload.UploadRequestDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryCompleteUpload indicates an expected call of TryCompleteUpload.
func (mr *MockUploadManagerMockRecorder) TryCompleteUpload(ctx, reqId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryCompleteUpload", reflect.TypeOf((*MockUploadManager)(nil).TryCompleteUpload), ctx, reqId)
}
