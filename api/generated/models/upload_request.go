// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UploadRequest upload request
//
// swagger:model uploadRequest
type UploadRequest struct {

	// expiry time
	// Required: true
	// Format: date-time
	ExpiryTime *strfmt.DateTime `json:"expiryTime"`

	// id
	// Required: true
	// Max Length: 36
	// Min Length: 36
	ID *string `json:"id"`

	// upload Url
	// Required: true
	// Min Length: 8
	UploadURL *string `json:"uploadUrl"`
}

// Validate validates this upload request
func (m *UploadRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UploadRequest) validateExpiryTime(formats strfmt.Registry) error {

	if err := validate.Required("expiryTime", "body", m.ExpiryTime); err != nil {
		return err
	}

	if err := validate.FormatOf("expiryTime", "body", "date-time", m.ExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UploadRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID, 36); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID, 36); err != nil {
		return err
	}

	return nil
}

func (m *UploadRequest) validateUploadURL(formats strfmt.Registry) error {

	if err := validate.Required("uploadUrl", "body", m.UploadURL); err != nil {
		return err
	}

	if err := validate.MinLength("uploadUrl", "body", *m.UploadURL, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upload request based on context it is used
func (m *UploadRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UploadRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UploadRequest) UnmarshalBinary(b []byte) error {
	var res UploadRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
