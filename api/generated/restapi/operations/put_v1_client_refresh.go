// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutV1ClientRefreshHandlerFunc turns a function with the right signature into a put v1 client refresh handler
type PutV1ClientRefreshHandlerFunc func(PutV1ClientRefreshParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutV1ClientRefreshHandlerFunc) Handle(params PutV1ClientRefreshParams) middleware.Responder {
	return fn(params)
}

// PutV1ClientRefreshHandler interface for that can handle valid put v1 client refresh params
type PutV1ClientRefreshHandler interface {
	Handle(PutV1ClientRefreshParams) middleware.Responder
}

// NewPutV1ClientRefresh creates a new http.Handler for the put v1 client refresh operation
func NewPutV1ClientRefresh(ctx *middleware.Context, handler PutV1ClientRefreshHandler) *PutV1ClientRefresh {
	return &PutV1ClientRefresh{Context: ctx, Handler: handler}
}

/* PutV1ClientRefresh swagger:route PUT /v1/client/refresh putV1ClientRefresh

Refresh a feather token that has recently expired

*/
type PutV1ClientRefresh struct {
	Context *middleware.Context
	Handler PutV1ClientRefreshHandler
}

func (o *PutV1ClientRefresh) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutV1ClientRefreshParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
