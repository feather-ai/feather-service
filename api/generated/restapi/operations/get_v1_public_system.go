// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetV1PublicSystemHandlerFunc turns a function with the right signature into a get v1 public system handler
type GetV1PublicSystemHandlerFunc func(GetV1PublicSystemParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1PublicSystemHandlerFunc) Handle(params GetV1PublicSystemParams) middleware.Responder {
	return fn(params)
}

// GetV1PublicSystemHandler interface for that can handle valid get v1 public system params
type GetV1PublicSystemHandler interface {
	Handle(GetV1PublicSystemParams) middleware.Responder
}

// NewGetV1PublicSystem creates a new http.Handler for the get v1 public system operation
func NewGetV1PublicSystem(ctx *middleware.Context, handler GetV1PublicSystemHandler) *GetV1PublicSystem {
	return &GetV1PublicSystem{Context: ctx, Handler: handler}
}

/* GetV1PublicSystem swagger:route GET /v1/public/system getV1PublicSystem

Get the full description for a specific system, by username and systemname.

*/
type GetV1PublicSystem struct {
	Context *middleware.Context
	Handler GetV1PublicSystemHandler
}

func (o *GetV1PublicSystem) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1PublicSystemParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
