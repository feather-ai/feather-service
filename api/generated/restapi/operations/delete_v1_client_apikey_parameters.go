// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewDeleteV1ClientApikeyParams creates a new DeleteV1ClientApikeyParams object
//
// There are no default values defined in the spec.
func NewDeleteV1ClientApikeyParams() DeleteV1ClientApikeyParams {

	return DeleteV1ClientApikeyParams{}
}

// DeleteV1ClientApikeyParams contains all the bound params for the delete v1 client apikey operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteV1ClientApikey
type DeleteV1ClientApikeyParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	Key strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteV1ClientApikeyParams() beforehand.
func (o *DeleteV1ClientApikeyParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qKey, qhkKey, _ := qs.GetOK("key")
	if err := o.bindKey(qKey, qhkKey, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindKey binds and validates parameter Key from query.
func (o *DeleteV1ClientApikeyParams) bindKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("key", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("key", "query", raw); err != nil {
		return err
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("key", "query", "strfmt.UUID", raw)
	}
	o.Key = *(value.(*strfmt.UUID))

	if err := o.validateKey(formats); err != nil {
		return err
	}

	return nil
}

// validateKey carries on validations for parameter Key
func (o *DeleteV1ClientApikeyParams) validateKey(formats strfmt.Registry) error {

	if err := validate.FormatOf("key", "query", "uuid", o.Key.String(), formats); err != nil {
		return err
	}
	return nil
}
