// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"feather-ai/service-core/api/generated/models"
)

// GetV1PublicSystemsOKCode is the HTTP code returned for type GetV1PublicSystemsOK
const GetV1PublicSystemsOKCode int = 200

/*GetV1PublicSystemsOK List of systems

swagger:response getV1PublicSystemsOK
*/
type GetV1PublicSystemsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.SystemInfo `json:"body,omitempty"`
}

// NewGetV1PublicSystemsOK creates GetV1PublicSystemsOK with default headers values
func NewGetV1PublicSystemsOK() *GetV1PublicSystemsOK {

	return &GetV1PublicSystemsOK{}
}

// WithPayload adds the payload to the get v1 public systems o k response
func (o *GetV1PublicSystemsOK) WithPayload(payload []*models.SystemInfo) *GetV1PublicSystemsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 public systems o k response
func (o *GetV1PublicSystemsOK) SetPayload(payload []*models.SystemInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1PublicSystemsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.SystemInfo, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetV1PublicSystemsNotFoundCode is the HTTP code returned for type GetV1PublicSystemsNotFound
const GetV1PublicSystemsNotFoundCode int = 404

/*GetV1PublicSystemsNotFound Nothing found

swagger:response getV1PublicSystemsNotFound
*/
type GetV1PublicSystemsNotFound struct {

	/*
	  In: Body
	*/
	Payload models.GenericError `json:"body,omitempty"`
}

// NewGetV1PublicSystemsNotFound creates GetV1PublicSystemsNotFound with default headers values
func NewGetV1PublicSystemsNotFound() *GetV1PublicSystemsNotFound {

	return &GetV1PublicSystemsNotFound{}
}

// WithPayload adds the payload to the get v1 public systems not found response
func (o *GetV1PublicSystemsNotFound) WithPayload(payload models.GenericError) *GetV1PublicSystemsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 public systems not found response
func (o *GetV1PublicSystemsNotFound) SetPayload(payload models.GenericError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1PublicSystemsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetV1PublicSystemsTooManyRequestsCode is the HTTP code returned for type GetV1PublicSystemsTooManyRequests
const GetV1PublicSystemsTooManyRequestsCode int = 429

/*GetV1PublicSystemsTooManyRequests Too many requests

swagger:response getV1PublicSystemsTooManyRequests
*/
type GetV1PublicSystemsTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload models.GenericError `json:"body,omitempty"`
}

// NewGetV1PublicSystemsTooManyRequests creates GetV1PublicSystemsTooManyRequests with default headers values
func NewGetV1PublicSystemsTooManyRequests() *GetV1PublicSystemsTooManyRequests {

	return &GetV1PublicSystemsTooManyRequests{}
}

// WithPayload adds the payload to the get v1 public systems too many requests response
func (o *GetV1PublicSystemsTooManyRequests) WithPayload(payload models.GenericError) *GetV1PublicSystemsTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 public systems too many requests response
func (o *GetV1PublicSystemsTooManyRequests) SetPayload(payload models.GenericError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1PublicSystemsTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
