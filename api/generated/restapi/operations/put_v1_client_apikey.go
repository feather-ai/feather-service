// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutV1ClientApikeyHandlerFunc turns a function with the right signature into a put v1 client apikey handler
type PutV1ClientApikeyHandlerFunc func(PutV1ClientApikeyParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutV1ClientApikeyHandlerFunc) Handle(params PutV1ClientApikeyParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutV1ClientApikeyHandler interface for that can handle valid put v1 client apikey params
type PutV1ClientApikeyHandler interface {
	Handle(PutV1ClientApikeyParams, interface{}) middleware.Responder
}

// NewPutV1ClientApikey creates a new http.Handler for the put v1 client apikey operation
func NewPutV1ClientApikey(ctx *middleware.Context, handler PutV1ClientApikeyHandler) *PutV1ClientApikey {
	return &PutV1ClientApikey{Context: ctx, Handler: handler}
}

/* PutV1ClientApikey swagger:route PUT /v1/client/apikey putV1ClientApikey

Create a new API key for the logged in user

*/
type PutV1ClientApikey struct {
	Context *middleware.Context
	Handler PutV1ClientApikeyHandler
}

func (o *PutV1ClientApikey) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutV1ClientApikeyParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
