// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetV1PublicSystemSystemIDParams creates a new GetV1PublicSystemSystemIDParams object
//
// There are no default values defined in the spec.
func NewGetV1PublicSystemSystemIDParams() GetV1PublicSystemSystemIDParams {

	return GetV1PublicSystemSystemIDParams{}
}

// GetV1PublicSystemSystemIDParams contains all the bound params for the get v1 public system system ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetV1PublicSystemSystemID
type GetV1PublicSystemSystemIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The ID of the system
	  Required: true
	  In: path
	*/
	SystemID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetV1PublicSystemSystemIDParams() beforehand.
func (o *GetV1PublicSystemSystemIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rSystemID, rhkSystemID, _ := route.Params.GetOK("systemId")
	if err := o.bindSystemID(rSystemID, rhkSystemID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindSystemID binds and validates parameter SystemID from path.
func (o *GetV1PublicSystemSystemIDParams) bindSystemID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("systemId", "path", "strfmt.UUID", raw)
	}
	o.SystemID = *(value.(*strfmt.UUID))

	if err := o.validateSystemID(formats); err != nil {
		return err
	}

	return nil
}

// validateSystemID carries on validations for parameter SystemID
func (o *GetV1PublicSystemSystemIDParams) validateSystemID(formats strfmt.Registry) error {

	if err := validate.FormatOf("systemId", "path", "uuid", o.SystemID.String(), formats); err != nil {
		return err
	}
	return nil
}
