// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetV1ClientApikeyHandlerFunc turns a function with the right signature into a get v1 client apikey handler
type GetV1ClientApikeyHandlerFunc func(GetV1ClientApikeyParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1ClientApikeyHandlerFunc) Handle(params GetV1ClientApikeyParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetV1ClientApikeyHandler interface for that can handle valid get v1 client apikey params
type GetV1ClientApikeyHandler interface {
	Handle(GetV1ClientApikeyParams, interface{}) middleware.Responder
}

// NewGetV1ClientApikey creates a new http.Handler for the get v1 client apikey operation
func NewGetV1ClientApikey(ctx *middleware.Context, handler GetV1ClientApikeyHandler) *GetV1ClientApikey {
	return &GetV1ClientApikey{Context: ctx, Handler: handler}
}

/* GetV1ClientApikey swagger:route GET /v1/client/apikey getV1ClientApikey

Get the list of all API keys for the logged in user

*/
type GetV1ClientApikey struct {
	Context *middleware.Context
	Handler GetV1ClientApikeyHandler
}

func (o *GetV1ClientApikey) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1ClientApikeyParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetV1ClientApikeyOKBodyItems0 get v1 client apikey o k body items0
//
// swagger:model GetV1ClientApikeyOKBodyItems0
type GetV1ClientApikeyOKBodyItems0 struct {

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// key
	// Format: uuid
	Key strfmt.UUID `json:"key,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this get v1 client apikey o k body items0
func (o *GetV1ClientApikeyOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1ClientApikeyOKBodyItems0) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetV1ClientApikeyOKBodyItems0) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(o.Key) { // not required
		return nil
	}

	if err := validate.FormatOf("key", "body", "uuid", o.Key.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get v1 client apikey o k body items0 based on context it is used
func (o *GetV1ClientApikeyOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetV1ClientApikeyOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV1ClientApikeyOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetV1ClientApikeyOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
