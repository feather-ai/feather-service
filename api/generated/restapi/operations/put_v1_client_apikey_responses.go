// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutV1ClientApikeyOKCode is the HTTP code returned for type PutV1ClientApikeyOK
const PutV1ClientApikeyOKCode int = 200

/*PutV1ClientApikeyOK New API Key

swagger:response putV1ClientApikeyOK
*/
type PutV1ClientApikeyOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPutV1ClientApikeyOK creates PutV1ClientApikeyOK with default headers values
func NewPutV1ClientApikeyOK() *PutV1ClientApikeyOK {

	return &PutV1ClientApikeyOK{}
}

// WithPayload adds the payload to the put v1 client apikey o k response
func (o *PutV1ClientApikeyOK) WithPayload(payload string) *PutV1ClientApikeyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put v1 client apikey o k response
func (o *PutV1ClientApikeyOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutV1ClientApikeyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutV1ClientApikeyBadRequestCode is the HTTP code returned for type PutV1ClientApikeyBadRequest
const PutV1ClientApikeyBadRequestCode int = 400

/*PutV1ClientApikeyBadRequest Error

swagger:response putV1ClientApikeyBadRequest
*/
type PutV1ClientApikeyBadRequest struct {
}

// NewPutV1ClientApikeyBadRequest creates PutV1ClientApikeyBadRequest with default headers values
func NewPutV1ClientApikeyBadRequest() *PutV1ClientApikeyBadRequest {

	return &PutV1ClientApikeyBadRequest{}
}

// WriteResponse to the client
func (o *PutV1ClientApikeyBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}
