// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutV1APISystemPreparePublishHandlerFunc turns a function with the right signature into a put v1 API system prepare publish handler
type PutV1APISystemPreparePublishHandlerFunc func(PutV1APISystemPreparePublishParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutV1APISystemPreparePublishHandlerFunc) Handle(params PutV1APISystemPreparePublishParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutV1APISystemPreparePublishHandler interface for that can handle valid put v1 API system prepare publish params
type PutV1APISystemPreparePublishHandler interface {
	Handle(PutV1APISystemPreparePublishParams, interface{}) middleware.Responder
}

// NewPutV1APISystemPreparePublish creates a new http.Handler for the put v1 API system prepare publish operation
func NewPutV1APISystemPreparePublish(ctx *middleware.Context, handler PutV1APISystemPreparePublishHandler) *PutV1APISystemPreparePublish {
	return &PutV1APISystemPreparePublish{Context: ctx, Handler: handler}
}

/* PutV1APISystemPreparePublish swagger:route PUT /v1/api/system/preparePublish putV1ApiSystemPreparePublish

Prepare to Publish a system to feather. The API will return upload URLs to use to upload the binary model files

*/
type PutV1APISystemPreparePublish struct {
	Context *middleware.Context
	Handler PutV1APISystemPreparePublishHandler
}

func (o *PutV1APISystemPreparePublish) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutV1APISystemPreparePublishParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
