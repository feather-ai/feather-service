// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetV1PublicUserUserNameHandlerFunc turns a function with the right signature into a get v1 public user user name handler
type GetV1PublicUserUserNameHandlerFunc func(GetV1PublicUserUserNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1PublicUserUserNameHandlerFunc) Handle(params GetV1PublicUserUserNameParams) middleware.Responder {
	return fn(params)
}

// GetV1PublicUserUserNameHandler interface for that can handle valid get v1 public user user name params
type GetV1PublicUserUserNameHandler interface {
	Handle(GetV1PublicUserUserNameParams) middleware.Responder
}

// NewGetV1PublicUserUserName creates a new http.Handler for the get v1 public user user name operation
func NewGetV1PublicUserUserName(ctx *middleware.Context, handler GetV1PublicUserUserNameHandler) *GetV1PublicUserUserName {
	return &GetV1PublicUserUserName{Context: ctx, Handler: handler}
}

/* GetV1PublicUserUserName swagger:route GET /v1/public/user/{userName} getV1PublicUserUserName

Get user info

*/
type GetV1PublicUserUserName struct {
	Context *middleware.Context
	Handler GetV1PublicUserUserNameHandler
}

func (o *GetV1PublicUserUserName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1PublicUserUserNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
